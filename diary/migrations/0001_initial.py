# Generated by Django 5.1.5 on 2025-02-22 11:55

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DiaryUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('email', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'diary_users',
            },
        ),
        migrations.CreateModel(
            name='EntryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'entry_categories',
            },
        ),
        migrations.CreateModel(
            name='EntryTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'entry_tags',
            },
        ),
        migrations.CreateModel(
            name='EventReactionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'event_reaction_categories',
            },
        ),
        migrations.CreateModel(
            name='JourneyCountry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('lang', models.CharField(max_length=100)),
                ('flag', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'journey_countries',
            },
        ),
        migrations.CreateModel(
            name='JourneyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'journey_types',
            },
        ),
        migrations.CreateModel(
            name='QuestionsGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=100, unique=True)),
                ('group_title', models.CharField(blank=True, max_length=100, null=True)),
                ('group_description', models.CharField(blank=True, max_length=500, null=True)),
                ('group_time_to_pass', models.CharField(blank=True, max_length=100, null=True)),
                ('group_frequency', models.CharField(blank=True, max_length=100, null=True)),
                ('max_score', models.IntegerField(null=True)),
                ('result_types', models.JSONField(null=True, verbose_name='result_types:\nJSON with types of questions group results: \nkeys - names of types; \nvalues - lists with exact 2 integers for range of scores.\nFor example:\n{"good": [0,13], "bad": [14,25]}')),
            ],
            options={
                'db_table': 'questions_groups',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questions_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.questionsgroup')),
                ('question_text', models.CharField(max_length=500)),
                ('order', models.IntegerField(default=1)),
            ],
            options={
                'db_table': 'questions',
            },
        ),
        migrations.CreateModel(
            name='TimelineEventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'timeline_event_categories',
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('date_time', models.DateTimeField(null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('image', models.BinaryField(blank=True, editable=True, null=True)),
                ('image_name', models.CharField(blank=True, max_length=100, null=True)),
                ('audio', models.BinaryField(blank=True, editable=True, null=True)),
                ('audio_name', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.diaryuser')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.entrycategory')),
                ('tag', models.ManyToManyField(blank=True, null=True, related_name='entries_of_tag', to='diary.entrytag')),
            ],
            options={
                'db_table': 'entries',
            },
        ),
        migrations.CreateModel(
            name='Journey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('dates', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('link', models.CharField(blank=True, max_length=500, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.diaryuser')),
                ('country', models.ManyToManyField(blank=True, null=True, related_name='journeys_of_country', to='diary.journeycountry')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.journeytype')),
            ],
            options={
                'db_table': 'journeys',
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=500)),
                ('order', models.IntegerField(default=1)),
                ('question', models.ManyToManyField(blank=True, null=True, related_name='choices_of_questions', to='diary.question')),
            ],
            options={
                'db_table': 'choices',
            },
        ),
        migrations.CreateModel(
            name='TimelineEventTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(max_length=200)),
                ('event_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.timelineeventcategory')),
            ],
            options={
                'db_table': 'timeline_event_templates',
            },
        ),
        migrations.CreateModel(
            name='UsersCompletedPoll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('questions_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.questionsgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.diaryuser')),
            ],
            options={
                'db_table': 'users_completed_polls',
            },
        ),
        migrations.CreateModel(
            name='UsersAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.choice')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.diaryuser')),
                ('user_completed_poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.userscompletedpoll')),
            ],
            options={
                'db_table': 'users_answers',
            },
        ),
        migrations.CreateModel(
            name='UsersTimeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_dt', models.DateTimeField(auto_now_add=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.diaryuser')),
            ],
            options={
                'db_table': 'users_timelines',
            },
        ),
        migrations.CreateModel(
            name='UsersTimelineEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('event', models.CharField(blank=True, max_length=500, null=True)),
                ('link', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('emotion', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.timelineeventcategory')),
                ('event_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.timelineeventtemplate')),
                ('timeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.userstimeline')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.diaryuser')),
            ],
            options={
                'db_table': 'users_timeline_events',
            },
        ),
        migrations.CreateModel(
            name='UsersTimelineEventReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('reaction', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('emotion', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.eventreactioncategory')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.userstimelineevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diary.diaryuser')),
            ],
            options={
                'db_table': 'users_timeline_event_reactions',
            },
        ),
    ]
